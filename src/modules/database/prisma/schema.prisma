generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String    @db.VarChar
  authId    Int       @db.Integer
  email     String    @unique @db.VarChar
  enabled   Boolean   @db.Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @db.Timestamp(6)
  address   Address[]
  carts     Cart[]
  orders    Order[]
}

model Address {
  id         String   @id @default(uuid())
  zipCode    String   @db.VarChar
  street     String   @db.VarChar
  city       String   @db.VarChar
  state      String   @db.VarChar
  country    String   @db.VarChar
  number     String?  @db.VarChar
  complement String?  @db.VarChar
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @default(uuid())
}

model Category {
  id          String    @id @default(uuid())
  name        String    @db.VarChar
  description String    @db.VarChar
  enabled     Boolean   @db.Boolean
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  name        String      @db.VarChar
  description String      @db.VarChar
  enabled     Boolean     @db.Boolean
  price       Float       @db.DoublePrecision
  categories  Category[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItem    CartItem[]
  orderItem   OrderItem[]
  discounts   Discount[]
}

model Cart {
  id        String     @id @default(uuid())
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @default(uuid())
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart?    @relation(fields: [cartId], references: [id])
  cartId    String?  @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @default(uuid())
  quantity  Int      @db.Integer
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String      @id @default(uuid())
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?     @default(uuid())
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?   @db.Timestamp(6)
}

model OrderItem {
  id        String   @id @default(uuid())
  cart      Order?   @relation(fields: [cartId], references: [id])
  cartId    String?  @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @default(uuid())
  quantity  Int      @db.Integer
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discount {
  id          String    @id @default(uuid())
  name        String    @db.VarChar
  description String    @db.VarChar
  percentage  Float     @db.DoublePrecision
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}
